use InstructionType::*;

use crate::opcodes::Operand::{Byte, DirectAddress, IndirectAddress, Register, Register16, Flag, Value, IoPort, SpOffset, IoPortOffset};
use crate::opcodes::Register16Id::HL;

#[derive(Debug)]
pub struct Instruction {
    pub mnemonic: &'static str,
    pub kind: InstructionType,
    pub lhs: Option<Operand>,
    pub rhs: Option<Operand>,
    pub cycles: u8,
}

#[derive(Debug)]
pub enum InstructionType {
    NOP,

    LD,
    LD16,
    LDI,
    LDD,

    INC,
    DEC,

    RL,
    RLA,
    RLC,
    RLCA,
    RR,
    RRA,
    RRC,
    RRCA,
    SLA,
    SRA,
    SRL,
    SWAP,
    BIT,
    RES,
    SET,

    ADD,
    ADD16,
    ADC,
    SUB,
    SBC,
    DAA,
    CP,
    CPL,
    SCF,
    CCF,

    STOP,
    HALT,

    AND,
    OR,
    XOR,

    POP,
    PUSH,

    JR,
    JP,
    RET,
    RETI,
    RST,
    CALL,

    CB,

    EI,
    DI,
}

#[derive(Debug)]
pub enum Operand {
    Byte,
    Register(RegisterId),
    Register16(Register16Id),
    /// nn
    DirectAddress,
    /// (nn), (BC) etc.
    IndirectAddress(Register16Id),
    Flag(FlagId),
    Value(u8),
    IoPort(RegisterId),
    IoPortOffset,
    // SP + n
    SpOffset,
}

#[derive(Copy, Clone, Debug)]
pub enum RegisterId {
    A,
    B,
    C,
    D,
    E,
    H,
    L,
    HL,
}

#[derive(Copy, Clone, Debug)]
pub enum Register16Id {
    AF,
    BC,
    DE,
    HL,
    SP,
}

#[derive(Debug)]
pub enum FlagId {
    Z,
    NZ,
    NC,
    C,
}

impl TryFrom<(u8, u8)> for Instruction {
    type Error = ();

    fn try_from(opcodes: (u8, u8)) -> Result<Instruction, ()> {
        match opcodes.0 {
            0x00 => Ok(instr0("NOP", NOP, 4)),
            0x01 => Ok(instr2("LD BC,d16", LD16, Register16(Register16Id::BC), Byte, 12)),
            0x02 => Ok(instr2("LD (BC),A", LD, IndirectAddress(Register16Id::BC), Register(RegisterId::A), 8)),
            0x03 => Ok(instr1("INC BC", INC, Register16(Register16Id::BC), 8)),
            0x04 => Ok(instr1("INC B", INC, Register(RegisterId::B), 4)),
            0x05 => Ok(instr1("DEC B", DEC, Register(RegisterId::B), 4)),
            0x06 => Ok(instr2("LD B,d8", LD, Register(RegisterId::B), Byte, 8)),
            0x07 => Ok(instr0("RLCA", RLCA, 4)),

            0x08 => Ok(instr2("LD (a16),SP", LD16, Byte, Register16(Register16Id::SP), 20)),
            0x09 => Ok(instr2("ADD HL,BC", ADD16, Register16(HL), Register16(Register16Id::BC), 8)),
            0x0A => Ok(instr2("LD A,(BC)", LD, Register(RegisterId::A), IndirectAddress(Register16Id::BC), 8)),
            0x0B => Ok(instr1("DEC BC", DEC, Register16(Register16Id::BC), 8)),
            0x0C => Ok(instr1("INC C", INC, Register(RegisterId::C), 4)),
            0x0D => Ok(instr1("DEC C", DEC, Register(RegisterId::C), 4)),
            0x0E => Ok(instr2("LD C,d8", LD, Register(RegisterId::C), Byte, 8)),
            0x0F => Ok(instr0("RRCA", RRCA, 4)),

            0x10 => Ok(instr0("STOP", STOP, 4)),
            0x11 => Ok(instr2("LD DE,d16", LD16, Register16(Register16Id::DE), Byte, 12)),
            0x12 => Ok(instr2("LD (DE),A", LD, IndirectAddress(Register16Id::DE), Register(RegisterId::A), 8)),
            0x13 => Ok(instr1("INC DE", INC, Register16(Register16Id::DE), 8)),
            0x14 => Ok(instr1("INC D", INC, Register(RegisterId::D), 4)),
            0x15 => Ok(instr1("DEC D", DEC, Register(RegisterId::D), 4)),
            0x16 => Ok(instr2("LD D,d8", LD, Register(RegisterId::D), Byte, 8)),
            0x17 => Ok(instr0("RLA", RLA, 4)),

            0x18 => Ok(instr1("JR r8", JR, Byte, 12)),
            0x19 => Ok(instr2("ADD HL,DE", ADD16, Register16(HL), Register16(Register16Id::DE), 8)),
            0x1A => Ok(instr2("LD A,(DE)", LD, Register(RegisterId::A), IndirectAddress(Register16Id::DE), 8)),
            0x1B => Ok(instr1("DEC DE", DEC, Register16(Register16Id::DE), 8)),
            0x1C => Ok(instr1("INC E", INC, Register(RegisterId::E), 4)),
            0x1D => Ok(instr1("DEC E", DEC, Register(RegisterId::E), 4)),
            0x1E => Ok(instr2("LD E,d8", LD, Register(RegisterId::E), Byte, 8)),
            0x1F => Ok(instr0("RRA", RRA, 4)),

            0x20 => Ok(instr2("JR NZ,r8", JR, Flag(FlagId::NZ), Byte, 8)),
            0x21 => Ok(instr2("LD HL,d16", LD16, Register16(HL), Byte, 12)),
            0x22 => Ok(instr2("LD (HL+),A", LDI, IndirectAddress(HL), Register(RegisterId::A), 8)),
            0x23 => Ok(instr1("INC HL", INC, Register16(HL), 8)),
            0x24 => Ok(instr1("INC H", INC, Register(RegisterId::H), 4)),
            0x25 => Ok(instr1("DEC H", DEC, Register(RegisterId::H), 4)),
            0x26 => Ok(instr2("LD H,d8", LD, Register(RegisterId::H), Byte, 8)),
            0x27 => Ok(instr0("DAA", DAA, 4)),

            0x28 => Ok(instr2("JR Z,r8", JR, Flag(FlagId::Z), Byte, 8)),
            0x29 => Ok(instr2("ADD HL,HL", ADD16, Register16(HL), Register16(HL), 8)),
            0x2A => Ok(instr2("LD A,(HL+)", LDI, Register(RegisterId::A), IndirectAddress(HL), 8)),
            0x2B => Ok(instr1("DEC HL", DEC, Register16(HL), 8)),
            0x2C => Ok(instr1("INC L", INC, Register(RegisterId::L), 4)),
            0x2D => Ok(instr1("DEC L", DEC, Register(RegisterId::L), 4)),
            0x2E => Ok(instr2("LD L,d8", LD, Register(RegisterId::L), Byte, 8)),
            0x2F => Ok(instr0("CPL", CPL, 4)),

            0x30 => Ok(instr2("JR NC,r8", JR, Flag(FlagId::NC), Byte, 8)),
            0x31 => Ok(instr2("LD SP,d16", LD16, Register16(Register16Id::SP), Byte, 12)),
            0x32 => Ok(instr2("LD (HL-),A", LDD, IndirectAddress(HL), Register(RegisterId::A), 8)),
            0x33 => Ok(instr1("INC SP", INC, Register16(Register16Id::SP), 8)),
            0x34 => Ok(instr1("INC (HL)", INC, IndirectAddress(HL), 12)),
            0x35 => Ok(instr1("DEC (HL)", DEC, IndirectAddress(HL), 12)),
            0x36 => Ok(instr2("LD (HL),d8", LD, IndirectAddress(HL), Byte, 12)),
            0x37 => Ok(instr0("SCF", SCF, 4)),

            0x38 => Ok(instr2("JR C,r8", JR, Flag(FlagId::C), Byte, 8)),
            0x39 => Ok(instr2("ADD HL,SP", ADD16, Register16(HL), Register16(Register16Id::SP), 8)),
            0x3A => Ok(instr2("LD A,(HL-)", LDD, Register(RegisterId::A), IndirectAddress(HL), 8)),
            0x3B => Ok(instr1("DEC SP", DEC, Register16(Register16Id::SP), 8)),
            0x3C => Ok(instr1("INC A", INC, Register(RegisterId::A), 4)),
            0x3D => Ok(instr1("DEC A", DEC, Register(RegisterId::A), 4)),
            0x3E => Ok(instr2("LD A,d8", LD, Register(RegisterId::A), Byte, 8)),
            0x3F => Ok(instr0("CCF", CCF, 4)),

            0x40 => Ok(instr2("LD B,B", LD, Register(RegisterId::B), Register(RegisterId::B), 4)),
            0x41 => Ok(instr2("LD B,C", LD, Register(RegisterId::B), Register(RegisterId::C), 4)),
            0x42 => Ok(instr2("LD B,D", LD, Register(RegisterId::B), Register(RegisterId::D), 4)),
            0x43 => Ok(instr2("LD B,E", LD, Register(RegisterId::B), Register(RegisterId::E), 4)),
            0x44 => Ok(instr2("LD B,H", LD, Register(RegisterId::B), Register(RegisterId::H), 4)),
            0x45 => Ok(instr2("LD B,L", LD, Register(RegisterId::B), Register(RegisterId::L), 4)),
            0x46 => Ok(instr2("LD B,(HL)", LD, Register(RegisterId::B), IndirectAddress(HL), 8)),
            0x47 => Ok(instr2("LD B,A", LD, Register(RegisterId::B), Register(RegisterId::A), 4)),

            0x48 => Ok(instr2("LD C,B", LD, Register(RegisterId::C), Register(RegisterId::B), 4)),
            0x49 => Ok(instr2("LD C,C", LD, Register(RegisterId::C), Register(RegisterId::C), 4)),
            0x4A => Ok(instr2("LD C,D", LD, Register(RegisterId::C), Register(RegisterId::D), 4)),
            0x4B => Ok(instr2("LD C,E", LD, Register(RegisterId::C), Register(RegisterId::E), 4)),
            0x4C => Ok(instr2("LD C,H", LD, Register(RegisterId::C), Register(RegisterId::H), 4)),
            0x4D => Ok(instr2("LD C,L", LD, Register(RegisterId::C), Register(RegisterId::L), 4)),
            0x4E => Ok(instr2("LD C,(HL)",LD, Register(RegisterId::C), IndirectAddress(HL), 8)),
            0x4F => Ok(instr2("LD C,A", LD, Register(RegisterId::C), Register(RegisterId::A), 4)),

            0x50 => Ok(instr2("LD D,B", LD, Register(RegisterId::D), Register(RegisterId::B), 4)),
            0x51 => Ok(instr2("LD D,C", LD, Register(RegisterId::D), Register(RegisterId::C), 4)),
            0x52 => Ok(instr2("LD D,D", LD, Register(RegisterId::D), Register(RegisterId::D), 4)),
            0x53 => Ok(instr2("LD D,E", LD, Register(RegisterId::D), Register(RegisterId::E), 4)),
            0x54 => Ok(instr2("LD D,H", LD, Register(RegisterId::D), Register(RegisterId::H), 4)),
            0x55 => Ok(instr2("LD D,L", LD, Register(RegisterId::D), Register(RegisterId::L), 4)),
            0x56 => Ok(instr2("LD D,(HL)",LD, Register(RegisterId::D), IndirectAddress(HL), 8)),
            0x57 => Ok(instr2("LD D,A", LD, Register(RegisterId::D), Register(RegisterId::A), 4)),

            0x58 => Ok(instr2("LD E,B", LD, Register(RegisterId::E), Register(RegisterId::B), 4)),
            0x59 => Ok(instr2("LD E,C", LD, Register(RegisterId::E), Register(RegisterId::C), 4)),
            0x5A => Ok(instr2("LD E,D", LD, Register(RegisterId::E), Register(RegisterId::D), 4)),
            0x5B => Ok(instr2("LD E,E", LD, Register(RegisterId::E), Register(RegisterId::E), 4)),
            0x5C => Ok(instr2("LD E,H", LD, Register(RegisterId::E), Register(RegisterId::H), 4)),
            0x5D => Ok(instr2("LD E,L", LD, Register(RegisterId::E), Register(RegisterId::L), 4)),
            0x5E => Ok(instr2("LD E,(HL)",LD, Register(RegisterId::E), IndirectAddress(HL), 8)),
            0x5F => Ok(instr2("LD E,A", LD, Register(RegisterId::E), Register(RegisterId::A), 4)),

            0x60 => Ok(instr2("LD H,B", LD, Register(RegisterId::H), Register(RegisterId::B), 4)),
            0x61 => Ok(instr2("LD H,C", LD, Register(RegisterId::H), Register(RegisterId::C), 4)),
            0x62 => Ok(instr2("LD H,D", LD, Register(RegisterId::H), Register(RegisterId::D), 4)),
            0x63 => Ok(instr2("LD H,E", LD, Register(RegisterId::H), Register(RegisterId::E), 4)),
            0x64 => Ok(instr2("LD H,H", LD, Register(RegisterId::H), Register(RegisterId::H), 4)),
            0x65 => Ok(instr2("LD H,L", LD, Register(RegisterId::H), Register(RegisterId::L), 4)),
            0x66 => Ok(instr2("LD H,(HL)",LD, Register(RegisterId::H), IndirectAddress(HL), 8)),
            0x67 => Ok(instr2("LD H,A", LD, Register(RegisterId::H), Register(RegisterId::A), 4)),

            0x68 => Ok(instr2("LD L,B", LD, Register(RegisterId::L), Register(RegisterId::B), 4)),
            0x69 => Ok(instr2("LD L,C", LD, Register(RegisterId::L), Register(RegisterId::C), 4)),
            0x6A => Ok(instr2("LD L,D", LD, Register(RegisterId::L), Register(RegisterId::D), 4)),
            0x6B => Ok(instr2("LD L,E", LD, Register(RegisterId::L), Register(RegisterId::E), 4)),
            0x6C => Ok(instr2("LD L,H", LD, Register(RegisterId::L), Register(RegisterId::H), 4)),
            0x6D => Ok(instr2("LD L,L", LD, Register(RegisterId::L), Register(RegisterId::L), 4)),
            0x6E => Ok(instr2("LD L,(HL)",LD, Register(RegisterId::L), IndirectAddress(HL), 8)),
            0x6F => Ok(instr2("LD L,A", LD, Register(RegisterId::L), Register(RegisterId::A), 4)),

            0x70 => Ok(instr2("LD (HL),B", LD, IndirectAddress(HL), Register(RegisterId::B), 8)),
            0x71 => Ok(instr2("LD (HL),C", LD, IndirectAddress(HL), Register(RegisterId::C), 8)),
            0x72 => Ok(instr2("LD (HL),D", LD, IndirectAddress(HL), Register(RegisterId::D), 8)),
            0x73 => Ok(instr2("LD (HL),E", LD, IndirectAddress(HL), Register(RegisterId::E), 8)),
            0x74 => Ok(instr2("LD (HL),H", LD, IndirectAddress(HL), Register(RegisterId::H), 8)),
            0x75 => Ok(instr2("LD (HL),L", LD, IndirectAddress(HL), Register(RegisterId::L), 8)),
            0x76 => todo!(),
            0x77 => Ok(instr2("LD (HL),A", LD, IndirectAddress(HL), Register(RegisterId::A), 8)),

            0x78 => Ok(instr2("LD A,B", LD, Register(RegisterId::A), Register(RegisterId::B), 4)),
            0x79 => Ok(instr2("LD A,C", LD, Register(RegisterId::A), Register(RegisterId::C), 4)),
            0x7A => Ok(instr2("LD A,D", LD, Register(RegisterId::A), Register(RegisterId::D), 4)),
            0x7B => Ok(instr2("LD A,E", LD, Register(RegisterId::A), Register(RegisterId::E), 4)),
            0x7C => Ok(instr2("LD A,H", LD, Register(RegisterId::A), Register(RegisterId::H), 4)),
            0x7D => Ok(instr2("LD A,L", LD, Register(RegisterId::A), Register(RegisterId::L), 4)),
            0x7E => Ok(instr2("LD A,(HL)",LD, Register(RegisterId::A), IndirectAddress(HL), 8)),
            0x7F => Ok(instr2("LD A,A", LD, Register(RegisterId::A), Register(RegisterId::A), 4)),

            0x80 => Ok(instr1("ADD A,B", ADD, Register(RegisterId::B), 4)),
            0x81 => Ok(instr1("ADD A,C", ADD, Register(RegisterId::C), 4)),
            0x82 => Ok(instr1("ADD A,D", ADD, Register(RegisterId::D), 4)),
            0x83 => Ok(instr1("ADD A,E", ADD, Register(RegisterId::E), 4)),
            0x84 => Ok(instr1("ADD A,H", ADD, Register(RegisterId::H), 4)),
            0x85 => Ok(instr1("ADD A,L", ADD, Register(RegisterId::L), 4)),
            0x86 => Ok(instr1("ADD A,(HL)", ADD, IndirectAddress(HL), 8)),
            0x87 => Ok(instr1("ADD A,A", ADD, Register(RegisterId::A), 4)),

            0x88 => Ok(instr1("ADC A,B", ADC, Register(RegisterId::B), 4)),
            0x89 => Ok(instr1("ADC A,C", ADC, Register(RegisterId::C), 4)),
            0x8A => Ok(instr1("ADC A,D", ADC, Register(RegisterId::D), 4)),
            0x8B => Ok(instr1("ADC A,E", ADC, Register(RegisterId::E), 4)),
            0x8C => Ok(instr1("ADC A,H", ADC, Register(RegisterId::H), 4)),
            0x8D => Ok(instr1("ADC A,L", ADC, Register(RegisterId::L), 4)),
            0x8E => Ok(instr1("ADC A,(HL)", ADC, IndirectAddress(HL), 8)),
            0x8F => Ok(instr1("ADC A,A", ADC, Register(RegisterId::A), 4)),

            0x90 => Ok(instr1("SUB A,B", SUB, Register(RegisterId::B), 4)),
            0x91 => Ok(instr1("SUB A,C", SUB, Register(RegisterId::C), 4)),
            0x92 => Ok(instr1("SUB A,D", SUB, Register(RegisterId::D), 4)),
            0x93 => Ok(instr1("SUB A,E", SUB, Register(RegisterId::E), 4)),
            0x94 => Ok(instr1("SUB A,H", SUB, Register(RegisterId::H), 4)),
            0x95 => Ok(instr1("SUB A,L", SUB, Register(RegisterId::L), 4)),
            0x96 => Ok(instr1("SUB A,(HL)", SUB, IndirectAddress(HL), 8)),
            0x97 => Ok(instr1("SUB A,A", SUB, Register(RegisterId::A), 4)),

            0x98 => Ok(instr1("SBC A,B", SBC, Register(RegisterId::B), 4)),
            0x99 => Ok(instr1("SBC A,C", SBC, Register(RegisterId::C), 4)),
            0x9A => Ok(instr1("SBC A,D", SBC, Register(RegisterId::D), 4)),
            0x9B => Ok(instr1("SBC A,E", SBC, Register(RegisterId::E), 4)),
            0x9C => Ok(instr1("SBC A,H", SBC, Register(RegisterId::H), 4)),
            0x9D => Ok(instr1("SBC A,L", SBC, Register(RegisterId::L), 4)),
            0x9E => Ok(instr1("SBC A,(HL)", SBC, IndirectAddress(HL), 8)),
            0x9F => Ok(instr1("SBC A,A", SBC, Register(RegisterId::A), 4)),

            0xA0 => Ok(instr1("AND B", AND, Register(RegisterId::B), 4)),
            0xA1 => Ok(instr1("AND C", AND, Register(RegisterId::C), 4)),
            0xA2 => Ok(instr1("AND D", AND, Register(RegisterId::D), 4)),
            0xA3 => Ok(instr1("AND E", AND, Register(RegisterId::E), 4)),
            0xA4 => Ok(instr1("AND H", AND, Register(RegisterId::H), 4)),
            0xA5 => Ok(instr1("AND L", AND, Register(RegisterId::L), 4)),
            0xA6 => Ok(instr1("AND (HL)", AND, IndirectAddress(HL), 8)),
            0xA7 => Ok(instr1("AND A", AND, Register(RegisterId::A), 4)),

            0xA8 => Ok(instr1("XOR B", XOR, Register(RegisterId::B), 4)),
            0xA9 => Ok(instr1("XOR C", XOR, Register(RegisterId::C), 4)),
            0xAA => Ok(instr1("XOR D", XOR, Register(RegisterId::D), 4)),
            0xAB => Ok(instr1("XOR E", XOR, Register(RegisterId::E), 4)),
            0xAC => Ok(instr1("XOR H", XOR, Register(RegisterId::H), 4)),
            0xAD => Ok(instr1("XOR L", XOR, Register(RegisterId::L), 4)),
            0xAE => Ok(instr1("XOR (HL)", XOR, IndirectAddress(HL), 8)),
            0xAF => Ok(instr1("XOR A", XOR, Register(RegisterId::A), 4)),

            0xB0 => Ok(instr1("OR B", OR, Register(RegisterId::B), 4)),
            0xB1 => Ok(instr1("OR C", OR, Register(RegisterId::C), 4)),
            0xB2 => Ok(instr1("OR D", OR, Register(RegisterId::D), 4)),
            0xB3 => Ok(instr1("OR E", OR, Register(RegisterId::E), 4)),
            0xB4 => Ok(instr1("OR H", OR, Register(RegisterId::H), 4)),
            0xB5 => Ok(instr1("OR L", OR, Register(RegisterId::L), 4)),
            0xB6 => Ok(instr1("OR (HL)", OR, IndirectAddress(HL), 8)),
            0xB7 => Ok(instr1("OR A", OR, Register(RegisterId::A), 4)),

            0xB8 => Ok(instr1("CP B", CP, Register(RegisterId::B), 4)),
            0xB9 => Ok(instr1("CP C", CP, Register(RegisterId::C), 4)),
            0xBA => Ok(instr1("CP D", CP, Register(RegisterId::D), 4)),
            0xBB => Ok(instr1("CP E", CP, Register(RegisterId::E), 4)),
            0xBC => Ok(instr1("CP H", CP, Register(RegisterId::H), 4)),
            0xBD => Ok(instr1("CP L", CP, Register(RegisterId::L), 4)),
            0xBE => Ok(instr1("CP (HL)", CP, IndirectAddress(HL), 8)),
            0xBF => Ok(instr1("CP A", CP, Register(RegisterId::A), 4)),

            0xC0 => Ok(instr1("RET NZ", RET, Flag(FlagId::NZ), 8)),
            0xC1 => Ok(instr1("POP BC", POP, Register16(Register16Id::BC), 12)),
            0xC2 => Ok(instr2("JP NZ,a16", JP, Flag(FlagId::NZ), Byte, 12)),
            0xC3 => Ok(instr1("JP a16", JP, Byte, 16)),
            0xC4 => Ok(instr2("CALL NZ,a16", CALL, Flag(FlagId::NZ), Byte, 16)),
            0xC5 => Ok(instr1("PUSH BC", PUSH, Register16(Register16Id::BC), 16)),
            0xC6 => Ok(instr1("ADD A,a8", ADD, Byte, 8)),
            0xC7 => Ok(instr1("RST 00H", RST, Value(0x00), 16)),

            0xC8 => Ok(instr1("RET Z", RET, Flag(FlagId::Z), 8)),
            0xC9 => Ok(instr0("RET", RET, 16)),
            0xCA => Ok(instr2("JP Z,a16", JP, Flag(FlagId::Z), Byte, 12)),
            0xCB => try_from_cb(opcodes.1),
            0xCC => Ok(instr2("CALL Z,a16", CALL, Flag(FlagId::Z), Byte, 16)),
            0xCD => Ok(instr1("CALL a16", CALL, Byte, 24)),
            0xCE => Ok(instr1("ADC A,a8", ADC, Byte, 8)),
            0xCF => Ok(instr1("RST 08H", RST, Value(0x08), 16)),

            0xD0 => Ok(instr1("RET NC", RET, Flag(FlagId::NC), 8)),
            0xD1 => Ok(instr1("POP DE", POP, Register16(Register16Id::DE), 12)),
            0xD2 => Ok(instr2("JP NC,a16", JP, Flag(FlagId::NC), Byte, 12)),
            // 0xD3 not used
            0xD4 => Ok(instr2("CALL NC,a16", CALL, Flag(FlagId::NC), Byte, 16)),
            0xD5 => Ok(instr1("PUSH DE", PUSH, Register16(Register16Id::DE), 16)),
            0xD6 => Ok(instr1("SUB d8", SUB, Byte, 8)),
            0xD7 => Ok(instr1("RST 10H", RST, Value(0x10), 16)),

            0xD8 => Ok(instr1("RET C", RET, Flag(FlagId::C), 8)),
            0xD9 => Ok(instr0("RETI", RETI, 16)),
            0xDA => Ok(instr2("JP C,a16", JP, Flag(FlagId::C), Byte, 12)),
            // 0xDB not used
            0xDC => Ok(instr2("CALL C,a16", CALL, Flag(FlagId::C), Byte, 16)),
            // 0xDD not used
            0xDE => Ok(instr1("SBC d8", SBC, Byte, 8)),
            0xDF => Ok(instr1("RST 18H", RST, Value(0x18), 16)),

            0xE0 => Ok(instr2("LDH (a8),A", LD, IoPortOffset, Register(RegisterId::A), 12)),
            0xE1 => Ok(instr1("POP HL", POP, Register16(HL), 12)),
            0xE2 => Ok(instr2("LD (C),A", LD, IoPort(RegisterId::C), Register(RegisterId::A), 8)),
            // 0xE3 not used
            // 0xE4 not used
            0xE5 => Ok(instr1("PUSH HL", PUSH, Register16(HL), 16)),
            0xE6 => Ok(instr1("AND d8", AND, Byte, 8)),
            0xE7 => Ok(instr1("RST 20H", RST, Value(0x20), 16)),

            0xE8 => Ok(instr2("ADD SP,r8", ADD16, Register16(Register16Id::SP), Byte, 16)),
            0xE9 => Ok(instr1("JP (HL)", JP, Register16(HL), 4)),
            0xEA => Ok(instr2("LD (a16),A", LD, DirectAddress, Register(RegisterId::A), 16)),
            // 0xEB not used
            // 0xEC not used
            // 0xED not used
            0xEE => Ok(instr1("XOR d8", XOR, Byte, 8)),
            0xEF => Ok(instr1("RST 28H", RST, Value(0x28), 16)),

            0xF0 => Ok(instr2("LDH A,(a8)", LD, Register(RegisterId::A), IoPortOffset, 12)),
            0xF1 => Ok(instr1("POP AF", POP, Register16(Register16Id::AF), 12)),
            0xF2 => Ok(instr2("LD A,(C)", LD, Register(RegisterId::A), IoPort(RegisterId::C), 8)),
            0xF3 => Ok(instr0("DI", DI, 4)),
            // 0xF4 not used
            0xF5 => Ok(instr1("PUSH HL", PUSH, Register16(Register16Id::AF), 16)),
            0xF6 => Ok(instr1("OR d8", OR, Byte, 8)),
            0xF7 => Ok(instr1("RST 30H", RST, Value(0x30), 16)),

            0xF8 => Ok(instr2("LD HL,SP+r8", LD16, Register16(HL), SpOffset, 12)),
            0xF9 => Ok(instr2("LD SP,HL", LD16, Register16(Register16Id::SP), Register16(HL), 8)),
            0xFA => Ok(instr2("LD A,(a16)", LD, Register(RegisterId::A), DirectAddress, 16)),
            0xFB => Ok(instr0("EI", EI, 4)),
            // 0xFC not used
            // 0xFD not used
            0xFE => Ok(instr1("CP d8", CP, Byte, 8)),
            0xFF => Ok(instr1("RST 38H", RST, Value(0x38), 16)),

            _ => Err(()),
        }
    }
}

fn try_from_cb(opcode: u8) -> Result<Instruction, ()> {
    match opcode {
        0x00 => Ok(instr1("RLC B", RLC, Register(RegisterId::B), 8)),
        0x01 => Ok(instr1("RLC C", RLC, Register(RegisterId::C), 8)),
        0x02 => Ok(instr1("RLC D", RLC, Register(RegisterId::D), 8)),
        0x03 => Ok(instr1("RLC E", RLC, Register(RegisterId::E), 8)),
        0x04 => Ok(instr1("RLC H", RLC, Register(RegisterId::H), 8)),
        0x05 => Ok(instr1("RLC L", RLC, Register(RegisterId::L), 8)),
        0x06 => Ok(instr1("RLC (HL)", RLC, IndirectAddress(HL), 16)),
        0x07 => Ok(instr1("RLC A", RLC, Register(RegisterId::A), 8)),
        0x08 => Ok(instr1("RLC B", RRC, Register(RegisterId::B), 8)),
        0x09 => Ok(instr1("RLC C", RRC, Register(RegisterId::C), 8)),
        0x0A => Ok(instr1("RLC D", RRC, Register(RegisterId::D), 8)),
        0x0B => Ok(instr1("RLC E", RRC, Register(RegisterId::E), 8)),
        0x0C => Ok(instr1("RLC H", RRC, Register(RegisterId::H), 8)),
        0x0D => Ok(instr1("RLC L", RRC, Register(RegisterId::L), 8)),
        0x0E => Ok(instr1("RLC (HL)", RRC, IndirectAddress(HL), 16)),
        0x0F => Ok(instr1("RLC A", RRC, Register(RegisterId::A), 8)),

        0x10 => Ok(instr1("RL B", RL, Register(RegisterId::B), 8)),
        0x11 => Ok(instr1("RL C", RL, Register(RegisterId::C), 8)),
        0x12 => Ok(instr1("RL D", RL, Register(RegisterId::D), 8)),
        0x13 => Ok(instr1("RL E", RL, Register(RegisterId::E), 8)),
        0x14 => Ok(instr1("RL H", RL, Register(RegisterId::H), 8)),
        0x15 => Ok(instr1("RL L", RL, Register(RegisterId::L), 8)),
        0x16 => Ok(instr1("RL (HL)", RL, IndirectAddress(HL), 16)),
        0x17 => Ok(instr1("RL A", RL, Register(RegisterId::A), 8)),
        0x18 => Ok(instr1("RR B", RR, Register(RegisterId::B), 8)),
        0x19 => Ok(instr1("RR C", RR, Register(RegisterId::C), 8)),
        0x1A => Ok(instr1("RR D", RR, Register(RegisterId::D), 8)),
        0x1B => Ok(instr1("RR E", RR, Register(RegisterId::E), 8)),
        0x1C => Ok(instr1("RR H", RR, Register(RegisterId::H), 8)),
        0x1D => Ok(instr1("RR L", RR, Register(RegisterId::L), 8)),
        0x1E => Ok(instr1("RR (HL)", RR, IndirectAddress(HL), 16)),
        0x1F => Ok(instr1("RR A", RR, Register(RegisterId::A), 8)),

        0x20 => Ok(instr1("SLA B", SLA, Register(RegisterId::B), 8)),
        0x21 => Ok(instr1("SLA C", SLA, Register(RegisterId::C), 8)),
        0x22 => Ok(instr1("SLA D", SLA, Register(RegisterId::D), 8)),
        0x23 => Ok(instr1("SLA E", SLA, Register(RegisterId::E), 8)),
        0x24 => Ok(instr1("SLA H", SLA, Register(RegisterId::H), 8)),
        0x25 => Ok(instr1("SLA L", SLA, Register(RegisterId::L), 8)),
        0x26 => Ok(instr1("SLA (HL)", SLA, IndirectAddress(HL), 16)),
        0x27 => Ok(instr1("SLA A", SLA, Register(RegisterId::A), 8)),
        0x28 => Ok(instr1("SRA B", SRA, Register(RegisterId::B), 8)),
        0x29 => Ok(instr1("SRA C", SRA, Register(RegisterId::C), 8)),
        0x2A => Ok(instr1("SRA D", SRA, Register(RegisterId::D), 8)),
        0x2B => Ok(instr1("SRA E", SRA, Register(RegisterId::E), 8)),
        0x2C => Ok(instr1("SRA H", SRA, Register(RegisterId::H), 8)),
        0x2D => Ok(instr1("SRA L", SRA, Register(RegisterId::L), 8)),
        0x2E => Ok(instr1("SRA (HL)", SRA, IndirectAddress(HL), 16)),
        0x2F => Ok(instr1("SRA A", SRA, Register(RegisterId::A), 8)),

        0x30 => Ok(instr1("SWAP B", SWAP, Register(RegisterId::B), 8)),
        0x31 => Ok(instr1("SWAP C", SWAP, Register(RegisterId::C), 8)),
        0x32 => Ok(instr1("SWAP D", SWAP, Register(RegisterId::D), 8)),
        0x33 => Ok(instr1("SWAP E", SWAP, Register(RegisterId::E), 8)),
        0x34 => Ok(instr1("SWAP H", SWAP, Register(RegisterId::H), 8)),
        0x35 => Ok(instr1("SWAP L", SWAP, Register(RegisterId::L), 8)),
        0x36 => Ok(instr1("SWAP (HL)", SWAP, IndirectAddress(HL), 16)),
        0x37 => Ok(instr1("SWAP A", SWAP, Register(RegisterId::A), 8)),
        0x38 => Ok(instr1("SRL B", SRL, Register(RegisterId::B), 8)),
        0x39 => Ok(instr1("SRL C", SRL, Register(RegisterId::C), 8)),
        0x3A => Ok(instr1("SRL D", SRL, Register(RegisterId::D), 8)),
        0x3B => Ok(instr1("SRL E", SRL, Register(RegisterId::E), 8)),
        0x3C => Ok(instr1("SRL H", SRL, Register(RegisterId::H), 8)),
        0x3D => Ok(instr1("SRL L", SRL, Register(RegisterId::L), 8)),
        0x3E => Ok(instr1("SRL (HL)", SRL, IndirectAddress(HL), 16)),
        0x3F => Ok(instr1("SRL A", SRL, Register(RegisterId::A), 8)),

        0x40 => Ok(instr2("BIT 0,B", BIT, Value(0), Register(RegisterId::B), 8)),
        0x41 => Ok(instr2("BIT 0,C", BIT, Value(0), Register(RegisterId::C), 8)),
        0x42 => Ok(instr2("BIT 0,D", BIT, Value(0), Register(RegisterId::D), 8)),
        0x43 => Ok(instr2("BIT 0,E", BIT, Value(0), Register(RegisterId::E), 8)),
        0x44 => Ok(instr2("BIT 0,H", BIT, Value(0), Register(RegisterId::H), 8)),
        0x45 => Ok(instr2("BIT 0,L", BIT, Value(0), Register(RegisterId::L), 8)),
        0x46 => Ok(instr2("BIT 0,(HL)", BIT, Value(0), IndirectAddress(HL), 16)),
        0x47 => Ok(instr2("BIT 0,A", BIT, Value(0), Register(RegisterId::A), 8)),
        0x48 => Ok(instr2("BIT 1,B", BIT, Value(1), Register(RegisterId::B), 8)),
        0x49 => Ok(instr2("BIT 1,C", BIT, Value(1), Register(RegisterId::C), 8)),
        0x4A => Ok(instr2("BIT 1,D", BIT, Value(1), Register(RegisterId::D), 8)),
        0x4B => Ok(instr2("BIT 1,E", BIT, Value(1), Register(RegisterId::E), 8)),
        0x4C => Ok(instr2("BIT 1,H", BIT, Value(1), Register(RegisterId::H), 8)),
        0x4D => Ok(instr2("BIT 1,L", BIT, Value(1), Register(RegisterId::L), 8)),
        0x4E => Ok(instr2("BIT 1,(HL)", BIT, Value(1), IndirectAddress(HL), 16)),
        0x4F => Ok(instr2("BIT 1,A", BIT, Value(1), Register(RegisterId::A), 8)),

        0x50 => Ok(instr2("BIT 2,B", BIT, Value(2), Register(RegisterId::B), 8)),
        0x51 => Ok(instr2("BIT 2,C", BIT, Value(2), Register(RegisterId::C), 8)),
        0x52 => Ok(instr2("BIT 2,D", BIT, Value(2), Register(RegisterId::D), 8)),
        0x53 => Ok(instr2("BIT 2,E", BIT, Value(2), Register(RegisterId::E), 8)),
        0x54 => Ok(instr2("BIT 2,H", BIT, Value(2), Register(RegisterId::H), 8)),
        0x55 => Ok(instr2("BIT 2,L", BIT, Value(2), Register(RegisterId::L), 8)),
        0x56 => Ok(instr2("BIT 2,(HL)", BIT, Value(2), IndirectAddress(HL), 16)),
        0x57 => Ok(instr2("BIT 2,A", BIT, Value(2), Register(RegisterId::A), 8)),
        0x58 => Ok(instr2("BIT 3,B", BIT, Value(3), Register(RegisterId::B), 8)),
        0x59 => Ok(instr2("BIT 3,C", BIT, Value(3), Register(RegisterId::C), 8)),
        0x5A => Ok(instr2("BIT 3,D", BIT, Value(3), Register(RegisterId::D), 8)),
        0x5B => Ok(instr2("BIT 3,E", BIT, Value(3), Register(RegisterId::E), 8)),
        0x5C => Ok(instr2("BIT 3,H", BIT, Value(3), Register(RegisterId::H), 8)),
        0x5D => Ok(instr2("BIT 3,L", BIT, Value(3), Register(RegisterId::L), 8)),
        0x5E => Ok(instr2("BIT 3,(HL)", BIT, Value(3), IndirectAddress(HL), 16)),
        0x5F => Ok(instr2("BIT 3,A", BIT, Value(3), Register(RegisterId::A), 8)),

        0x60 => Ok(instr2("BIT 4,B", BIT, Value(4), Register(RegisterId::B), 8)),
        0x61 => Ok(instr2("BIT 4,C", BIT, Value(4), Register(RegisterId::C), 8)),
        0x62 => Ok(instr2("BIT 4,D", BIT, Value(4), Register(RegisterId::D), 8)),
        0x63 => Ok(instr2("BIT 4,E", BIT, Value(4), Register(RegisterId::E), 8)),
        0x64 => Ok(instr2("BIT 4,H", BIT, Value(4), Register(RegisterId::H), 8)),
        0x65 => Ok(instr2("BIT 4,L", BIT, Value(4), Register(RegisterId::L), 8)),
        0x66 => Ok(instr2("BIT 4,(HL)", BIT, Value(4), IndirectAddress(HL), 16)),
        0x67 => Ok(instr2("BIT A", BIT, Value(4), Register(RegisterId::A), 8)),
        0x68 => Ok(instr2("BIT B", BIT, Value(5), Register(RegisterId::B), 8)),
        0x69 => Ok(instr2("BIT 5,C", BIT, Value(5), Register(RegisterId::C), 8)),
        0x6A => Ok(instr2("BIT 5,D", BIT, Value(5), Register(RegisterId::D), 8)),
        0x6B => Ok(instr2("BIT 5,E", BIT, Value(5), Register(RegisterId::E), 8)),
        0x6C => Ok(instr2("BIT 5,H", BIT, Value(5), Register(RegisterId::H), 8)),
        0x6D => Ok(instr2("BIT 5,L", BIT, Value(5), Register(RegisterId::L), 8)),
        0x6E => Ok(instr2("BIT 5,(HL)", BIT, Value(5), IndirectAddress(HL), 16)),
        0x6F => Ok(instr2("BIT 5,A", BIT, Value(5), Register(RegisterId::A), 8)),

        0x70 => Ok(instr2("BIT 6,B", BIT, Value(6), Register(RegisterId::B), 8)),
        0x71 => Ok(instr2("BIT 6,C", BIT, Value(6), Register(RegisterId::C), 8)),
        0x72 => Ok(instr2("BIT 6,D", BIT, Value(6), Register(RegisterId::D), 8)),
        0x73 => Ok(instr2("BIT 6,E", BIT, Value(6), Register(RegisterId::E), 8)),
        0x74 => Ok(instr2("BIT 6,H", BIT, Value(6), Register(RegisterId::H), 8)),
        0x75 => Ok(instr2("BIT 6,L", BIT, Value(6), Register(RegisterId::L), 8)),
        0x76 => Ok(instr2("BIT 6,(HL)", BIT, Value(6), IndirectAddress(HL), 16)),
        0x77 => Ok(instr2("BIT 6,A", BIT, Value(6), Register(RegisterId::A), 8)),
        0x78 => Ok(instr2("BIT 7,B", BIT, Value(7), Register(RegisterId::B), 8)),
        0x79 => Ok(instr2("BIT 7,C", BIT, Value(7), Register(RegisterId::C), 8)),
        0x7A => Ok(instr2("BIT 7,D", BIT, Value(7), Register(RegisterId::D), 8)),
        0x7B => Ok(instr2("BIT 7,E", BIT, Value(7), Register(RegisterId::E), 8)),
        0x7C => Ok(instr2("BIT 7,H", BIT, Value(7), Register(RegisterId::H), 8)),
        0x7D => Ok(instr2("BIT 7,L", BIT, Value(7), Register(RegisterId::L), 8)),
        0x7E => Ok(instr2("BIT 7,(HL)", BIT, Value(7), IndirectAddress(HL), 16)),
        0x7F => Ok(instr2("BIT 7,A", BIT, Value(7), Register(RegisterId::A), 8)),

        0x80 => Ok(instr2("RES 0,B", RES, Value(0), Register(RegisterId::B), 8)),
        0x81 => Ok(instr2("RES 0,C", RES, Value(0), Register(RegisterId::C), 8)),
        0x82 => Ok(instr2("RES 0,D", RES, Value(0), Register(RegisterId::D), 8)),
        0x83 => Ok(instr2("RES 0,E", RES, Value(0), Register(RegisterId::E), 8)),
        0x84 => Ok(instr2("RES 0,H", RES, Value(0), Register(RegisterId::H), 8)),
        0x85 => Ok(instr2("RES 0,L", RES, Value(0), Register(RegisterId::L), 8)),
        0x86 => Ok(instr2("RES 0,(HL)", RES, Value(0), IndirectAddress(HL), 16)),
        0x87 => Ok(instr2("RES 0,A", RES, Value(0), Register(RegisterId::A), 8)),
        0x88 => Ok(instr2("RES 1,B", RES, Value(1), Register(RegisterId::B), 8)),
        0x89 => Ok(instr2("RES 1,C", RES, Value(1), Register(RegisterId::C), 8)),
        0x8A => Ok(instr2("RES 1,D", RES, Value(1), Register(RegisterId::D), 8)),
        0x8B => Ok(instr2("RES 1,E", RES, Value(1), Register(RegisterId::E), 8)),
        0x8C => Ok(instr2("RES 1,H", RES, Value(1), Register(RegisterId::H), 8)),
        0x8D => Ok(instr2("RES 1,L", RES, Value(1), Register(RegisterId::L), 8)),
        0x8E => Ok(instr2("RES 1,(HL)", RES, Value(1), IndirectAddress(HL), 16)),
        0x8F => Ok(instr2("RES 1,A", RES, Value(1), Register(RegisterId::A), 8)),

        0x90 => Ok(instr2("RES 2,B", RES, Value(2), Register(RegisterId::B), 8)),
        0x91 => Ok(instr2("RES 2,C", RES, Value(2), Register(RegisterId::C), 8)),
        0x92 => Ok(instr2("RES 2,D", RES, Value(2), Register(RegisterId::D), 8)),
        0x93 => Ok(instr2("RES 2,E", RES, Value(2), Register(RegisterId::E), 8)),
        0x94 => Ok(instr2("RES 2,H", RES, Value(2), Register(RegisterId::H), 8)),
        0x95 => Ok(instr2("RES 2,L", RES, Value(2), Register(RegisterId::L), 8)),
        0x96 => Ok(instr2("RES 2,(HL)", RES, Value(2), IndirectAddress(HL), 16)),
        0x97 => Ok(instr2("RES 2,A", RES, Value(2), Register(RegisterId::A), 8)),
        0x98 => Ok(instr2("RES 3,B", RES, Value(3), Register(RegisterId::B), 8)),
        0x99 => Ok(instr2("RES 3,C", RES, Value(3), Register(RegisterId::C), 8)),
        0x9A => Ok(instr2("RES 3,D", RES, Value(3), Register(RegisterId::D), 8)),
        0x9B => Ok(instr2("RES 3,E", RES, Value(3), Register(RegisterId::E), 8)),
        0x9C => Ok(instr2("RES 3,H", RES, Value(3), Register(RegisterId::H), 8)),
        0x9D => Ok(instr2("RES 3,L", RES, Value(3), Register(RegisterId::L), 8)),
        0x9E => Ok(instr2("RES 3,(HL)", RES, Value(3), IndirectAddress(HL), 16)),
        0x9F => Ok(instr2("RES 3,A", RES, Value(3), Register(RegisterId::A), 8)),

        0xA0 => Ok(instr2("RES 4,B", RES, Value(4), Register(RegisterId::B), 8)),
        0xA1 => Ok(instr2("RES 4,C", RES, Value(4), Register(RegisterId::C), 8)),
        0xA2 => Ok(instr2("RES 4,D", RES, Value(4), Register(RegisterId::D), 8)),
        0xA3 => Ok(instr2("RES 4,E", RES, Value(4), Register(RegisterId::E), 8)),
        0xA4 => Ok(instr2("RES 4,H", RES, Value(4), Register(RegisterId::H), 8)),
        0xA5 => Ok(instr2("RES 4,L", RES, Value(4), Register(RegisterId::L), 8)),
        0xA6 => Ok(instr2("RES 4,(HL)", RES, Value(4), IndirectAddress(HL), 16)),
        0xA7 => Ok(instr2("RES 4,A", RES, Value(4), Register(RegisterId::A), 8)),
        0xA8 => Ok(instr2("RES 5,B", RES, Value(5), Register(RegisterId::B), 8)),
        0xA9 => Ok(instr2("RES 5,C", RES, Value(5), Register(RegisterId::C), 8)),
        0xAA => Ok(instr2("RES 5,D", RES, Value(5), Register(RegisterId::D), 8)),
        0xAB => Ok(instr2("RES 5,E", RES, Value(5), Register(RegisterId::E), 8)),
        0xAC => Ok(instr2("RES 5,H", RES, Value(5), Register(RegisterId::H), 8)),
        0xAD => Ok(instr2("RES 5,L", RES, Value(5), Register(RegisterId::L), 8)),
        0xAE => Ok(instr2("RES 5,(HL)", RES, Value(5), IndirectAddress(HL), 16)),
        0xAF => Ok(instr2("RES 5,A", RES, Value(5), Register(RegisterId::A), 8)),

        0xB0 => Ok(instr2("RES 6,B", RES, Value(6), Register(RegisterId::B), 8)),
        0xB1 => Ok(instr2("RES 6,C", RES, Value(6), Register(RegisterId::C), 8)),
        0xB2 => Ok(instr2("RES 6,D", RES, Value(6), Register(RegisterId::D), 8)),
        0xB3 => Ok(instr2("RES 6,E", RES, Value(6), Register(RegisterId::E), 8)),
        0xB4 => Ok(instr2("RES 6,H", RES, Value(6), Register(RegisterId::H), 8)),
        0xB5 => Ok(instr2("RES 6,L", RES, Value(6), Register(RegisterId::L), 8)),
        0xB6 => Ok(instr2("RES 6,(HL)", RES, Value(6), IndirectAddress(HL), 16)),
        0xB7 => Ok(instr2("RES 6,A", RES, Value(6), Register(RegisterId::A), 8)),
        0xB8 => Ok(instr2("RES 7,B", RES, Value(7), Register(RegisterId::B), 8)),
        0xB9 => Ok(instr2("RES 7,C", RES, Value(7), Register(RegisterId::C), 8)),
        0xBA => Ok(instr2("RES 7,D", RES, Value(7), Register(RegisterId::D), 8)),
        0xBB => Ok(instr2("RES 7,E", RES, Value(7), Register(RegisterId::E), 8)),
        0xBC => Ok(instr2("RES 7,H", RES, Value(7), Register(RegisterId::H), 8)),
        0xBD => Ok(instr2("RES 7,L", RES, Value(7), Register(RegisterId::L), 8)),
        0xBE => Ok(instr2("RES 7,(HL)", RES, Value(7), IndirectAddress(HL), 16)),
        0xBF => Ok(instr2("RES 7,A", RES, Value(7), Register(RegisterId::A), 8)),

        0xC0 => Ok(instr2("SET 0,B", SET, Value(0), Register(RegisterId::B), 8)),
        0xC1 => Ok(instr2("SET 0,C", SET, Value(0), Register(RegisterId::C), 8)),
        0xC2 => Ok(instr2("SET 0,D", SET, Value(0), Register(RegisterId::D), 8)),
        0xC3 => Ok(instr2("SET 0,E", SET, Value(0), Register(RegisterId::E), 8)),
        0xC4 => Ok(instr2("SET 0,H", SET, Value(0), Register(RegisterId::H), 8)),
        0xC5 => Ok(instr2("SET 0,L", SET, Value(0), Register(RegisterId::L), 8)),
        0xC6 => Ok(instr2("SET 0,(HL)", SET, Value(0), IndirectAddress(HL), 16)),
        0xC7 => Ok(instr2("SET 0,A", SET, Value(0), Register(RegisterId::A), 8)),
        0xC8 => Ok(instr2("SET 1,B", SET, Value(1), Register(RegisterId::B), 8)),
        0xC9 => Ok(instr2("SET 1,C", SET, Value(1), Register(RegisterId::C), 8)),
        0xCA => Ok(instr2("SET 1,D", SET, Value(1), Register(RegisterId::D), 8)),
        0xCB => Ok(instr2("SET 1,E", SET, Value(1), Register(RegisterId::E), 8)),
        0xCC => Ok(instr2("SET 1,H", SET, Value(1), Register(RegisterId::H), 8)),
        0xCD => Ok(instr2("SET 1,L", SET, Value(1), Register(RegisterId::L), 8)),
        0xCE => Ok(instr2("SET 1,(HL)", SET, Value(1), IndirectAddress(HL), 16)),
        0xCF => Ok(instr2("SET 1,A", SET, Value(1), Register(RegisterId::A), 8)),

        0xD0 => Ok(instr2("SET 2,B", SET, Value(2), Register(RegisterId::B), 8)),
        0xD1 => Ok(instr2("SET 2,C", SET, Value(2), Register(RegisterId::C), 8)),
        0xD2 => Ok(instr2("SET 2,D", SET, Value(2), Register(RegisterId::D), 8)),
        0xD3 => Ok(instr2("SET 2,E", SET, Value(2), Register(RegisterId::E), 8)),
        0xD4 => Ok(instr2("SET 2,H", SET, Value(2), Register(RegisterId::H), 8)),
        0xD5 => Ok(instr2("SET 2,L", SET, Value(2), Register(RegisterId::L), 8)),
        0xD6 => Ok(instr2("SET 2,(HL)", SET, Value(2), IndirectAddress(HL), 16)),
        0xD7 => Ok(instr2("SET 2,A", SET, Value(2), Register(RegisterId::A), 8)),
        0xD8 => Ok(instr2("SET 3,B", SET, Value(3), Register(RegisterId::B), 8)),
        0xD9 => Ok(instr2("SET 3,C", SET, Value(3), Register(RegisterId::C), 8)),
        0xDA => Ok(instr2("SET 3,D", SET, Value(3), Register(RegisterId::D), 8)),
        0xDB => Ok(instr2("SET 3,E", SET, Value(3), Register(RegisterId::E), 8)),
        0xDC => Ok(instr2("SET 3,H", SET, Value(3), Register(RegisterId::H), 8)),
        0xDD => Ok(instr2("SET 3,L", SET, Value(3), Register(RegisterId::L), 8)),
        0xDE => Ok(instr2("SET 3,(HL)", SET, Value(3), IndirectAddress(HL), 16)),
        0xDF => Ok(instr2("SET 3,A", SET, Value(3), Register(RegisterId::A), 8)),

        0xE0 => Ok(instr2("SET 4,B", SET, Value(4), Register(RegisterId::B), 8)),
        0xE1 => Ok(instr2("SET 4,C", SET, Value(4), Register(RegisterId::C), 8)),
        0xE2 => Ok(instr2("SET 4,D", SET, Value(4), Register(RegisterId::D), 8)),
        0xE3 => Ok(instr2("SET 4,E", SET, Value(4), Register(RegisterId::E), 8)),
        0xE4 => Ok(instr2("SET 4,H", SET, Value(4), Register(RegisterId::H), 8)),
        0xE5 => Ok(instr2("SET 4,L", SET, Value(4), Register(RegisterId::L), 8)),
        0xE6 => Ok(instr2("SET 4,(HL)", SET, Value(4), IndirectAddress(HL), 16)),
        0xE7 => Ok(instr2("SET 4,A", SET, Value(4), Register(RegisterId::A), 8)),
        0xE8 => Ok(instr2("SET 5,B", SET, Value(5), Register(RegisterId::B), 8)),
        0xE9 => Ok(instr2("SET 5,C", SET, Value(5), Register(RegisterId::C), 8)),
        0xEA => Ok(instr2("SET 5,D", SET, Value(5), Register(RegisterId::D), 8)),
        0xEB => Ok(instr2("SET 5,E", SET, Value(5), Register(RegisterId::E), 8)),
        0xEC => Ok(instr2("SET 5,H", SET, Value(5), Register(RegisterId::H), 8)),
        0xED => Ok(instr2("SET 5,L", SET, Value(5), Register(RegisterId::L), 8)),
        0xEE => Ok(instr2("SET 5,(HL)", SET, Value(5), IndirectAddress(HL), 16)),
        0xEF => Ok(instr2("SET 5,A", SET, Value(5), Register(RegisterId::A), 8)),

        0xF0 => Ok(instr2("SET 6,B", SET, Value(6), Register(RegisterId::B), 8)),
        0xF1 => Ok(instr2("SET 6,C", SET, Value(6), Register(RegisterId::C), 8)),
        0xF2 => Ok(instr2("SET 6,D", SET, Value(6), Register(RegisterId::D), 8)),
        0xF3 => Ok(instr2("SET 6,E", SET, Value(6), Register(RegisterId::E), 8)),
        0xF4 => Ok(instr2("SET 6,H", SET, Value(6), Register(RegisterId::H), 8)),
        0xF5 => Ok(instr2("SET 6,L", SET, Value(6), Register(RegisterId::L), 8)),
        0xF6 => Ok(instr2("SET 6,(HL)", SET, Value(6), IndirectAddress(HL), 16)),
        0xF7 => Ok(instr2("SET 6,A", SET, Value(6), Register(RegisterId::A), 8)),
        0xF8 => Ok(instr2("SET 7,B", SET, Value(7), Register(RegisterId::B), 8)),
        0xF9 => Ok(instr2("SET 7,C", SET, Value(7), Register(RegisterId::C), 8)),
        0xFA => Ok(instr2("SET 7,D", SET, Value(7), Register(RegisterId::D), 8)),
        0xFB => Ok(instr2("SET 7,E", SET, Value(7), Register(RegisterId::E), 8)),
        0xFC => Ok(instr2("SET 7,H", SET, Value(7), Register(RegisterId::H), 8)),
        0xFD => Ok(instr2("SET 7,L", SET, Value(7), Register(RegisterId::L), 8)),
        0xFE => Ok(instr2("SET 7,(HL)", SET, Value(7), IndirectAddress(HL), 16)),
        0xFF => Ok(instr2("SET 7,A", SET, Value(7), Register(RegisterId::A), 8)),
    }
}

fn instr0(mnemonic: &'static str, kind: InstructionType, cycles: u8) -> Instruction {
    Instruction {
        mnemonic,
        kind,
        lhs: None,
        rhs: None,
        cycles,
    }
}

fn instr1(mnemonic: &'static str, kind: InstructionType, lhs: Operand, cycles: u8) -> Instruction {
    Instruction {
        mnemonic,
        kind,
        lhs: Some(lhs),
        rhs: None,
        cycles,
    }
}

fn instr2(mnemonic: &'static str, kind: InstructionType, lhs: Operand, rhs: Operand, cycles: u8) -> Instruction {
    Instruction {
        mnemonic,
        kind,
        lhs: Some(lhs),
        rhs: Some(rhs),
        cycles,
    }
}
